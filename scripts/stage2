#!/bin/bash
set -x

LOCK=/run/lock/ghost-stage-2

while [ -d $LOCK ] ; do
    ls -l $LOCK
    echo "Waiting 30s for $LOCK lock to be released..."
    sleep 30
done

mkdir $LOCK
echo "Locked $LOCK"

S3_BUCKET={{ bucket_s3 }}
TS=$(date +%Y%m%d_%H%M%S)
LOGFILE=$(echo $TS"_deploy.txt")

INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
EC2_AVAIL_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
EC2_REGION="`echo \"$EC2_AVAIL_ZONE\" | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"

TAGS=$(/usr/local/bin/aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" --region "$EC2_REGION")
NAME=$(echo $TAGS | jq -r ".Tags[] | { key: .Key, value: .Value } | [.] | from_entries" | jq -r '.["Name"] | select (.!=null)')
ROLE=$(echo $TAGS | jq -r ".Tags[] | { key: .Key, value: .Value } | [.] | from_entries" | jq -r '.["role"] | select (.!=null)')
ENV=$(echo $TAGS | jq -r ".Tags[] | { key: .Key, value: .Value } | [.] | from_entries" | jq -r '.["env"] | select (.!=null)')
APP=$(echo $TAGS | jq -r ".Tags[] | { key: .Key, value: .Value } | [.] | from_entries" | jq -r '.["app"] | select (.!=null)')

if [ ! -d /ghost ]; then
    mkdir /ghost && chown -R admin:admin /ghost
fi

if [ ! -d /var/lib/ghost ]; then
    mkdir /var/lib/ghost
fi

function zabbix_hostname(){
    #Update Zabbix agent name
    IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4 | tr -s '.' '-')
    sed -i "s/.*Hostname=.*/&-${IP}/g" /etc/zabbix/zabbix_agentd.conf
    service zabbix-agent restart
}

if [ -z "$1" ] ; then
    zabbix_hostname
fi

function purge_latest_failed_deploy() {
    MODULE_NAME=$1
    MODULE_PATH=/ghost/$2
    FAILED="_failed"
    MODULE_FAILED=/var/lib/ghost/$MODULE_NAME$FAILED

    if [ -e $MODULE_FAILED ]; then
        MODULE_TO_DELETE=$(head -n 1 $MODULE_FAILED)
        echo "Purging latest failed module: $MODULE_TO_DELETE" >> /tmp/$LOGFILE
        rm -rf $MODULE_TO_DELETE
        # Remove deleted module from history
        sed -i 1d $MODULE_FAILED
    fi
    # Append fail to the failed module deployment history
    echo $MODULE_PATH >> $MODULE_FAILED
}

function purge_oldest_succeed_deploy() {
    MODULE_NAME=$1
    MODULE_PATH=/ghost/$2
    SUCCEED="_succeed"
    MODULE_SUCCEED=/var/lib/ghost/$MODULE_NAME$SUCCEED
    MAX_DEPLOY_HISTORY="3"

    if [ -e $MODULE_SUCCEED ]; then
        NUM_OF_DEPLOY=$(wc -l < $MODULE_SUCCEED)
        if [ $NUM_OF_DEPLOY -gt $MAX_DEPLOY_HISTORY ]; then
            MODULE_TO_DELETE=$(head -n 1 $MODULE_SUCCEED)
            echo "Purging oldest succeed module: $MODULE_TO_DELETE" >> /tmp/$LOGFILE
            rm -rf $MODULE_TO_DELETE
            # Remove deleted module from history
            sed -i 1d $MODULE_SUCCEED
        fi
    fi
    # Append succeed to the succeed module deployment history
    echo $MODULE_PATH >> $MODULE_SUCCEED
}

function deploy_module() {
    UUID=$(cat /proc/sys/kernel/random/uuid)
    MODULE_NAME=$1
    if [ -z $MODULE_NAME ]; then
        echo "MODULE_NAME cannot be empy"
        exit_deployment -1
    fi
    MODULE_FILE=$2
    if [ -z $MODULE_FILE ]; then
        echo "MODULE_FILE cannot be empy"
        exit_deployment -1
    fi
    TARGET=$3
    if [ -z $TARGET ]; then
        echo "TARGET cannot be empy"
        exit_deployment -1
    fi
    if [ ${TARGET%%+(/)} == "/tmp" ]; then
        echo "TARGET path cannot be /tmp"
        exit_deployment -1
    fi

    echo "--------------------------------" >> /tmp/$LOGFILE
    echo "Deploying module $MODULE_NAME in $TARGET" >> /tmp/$LOGFILE
    /usr/local/bin/aws s3 cp s3://$S3_BUCKET/ghost/$APP/$ENV/$ROLE/$MODULE_NAME/$MODULE_FILE /tmp/$MODULE_FILE  --region "$EC2_REGION"

    mkdir -p /ghost/$UUID
    chown -R admin:admin /ghost/$UUID
    echo "Extracting module in /ghost/$UUID" >> /tmp/$LOGFILE
    tar xvzf /tmp/$MODULE_FILE -C /ghost/$UUID > /dev/null
    if [ $? -ne 0 ] || [ ! -f /tmp/$MODULE_FILE ]; then
        echo "Extracting module failed !"
        exit_deployment -1
    fi

    rm -rf /tmp/$MODULE_FILE
    cd /ghost/$UUID

    if [ -e predeploy ]; then
        echo "Executing predeploy script..." >> /tmp/$LOGFILE
        chmod +x predeploy
        GHOST_APP=$APP GHOST_ENV=$ENV GHOST_ROLE=$ROLE GHOST_MODULE_NAME=$MODULE_NAME GHOST_MODULE_PATH=$TARGET ./predeploy 2>&1 | tee -a /tmp/$LOGFILE
        local status=${PIPESTATUS[0]}
        if [ $status -ne 0 ]; then
            purge_latest_failed_deploy $MODULE_NAME $UUID
            exit_deployment -1
        fi
    fi

    # Clear folder if not a symlink (not a Ghost managed module)
    if ! [ -h $TARGET ]; then
        echo "Clearing unmanaged folder..." >> /tmp/$LOGFILE
        rm -rfv $TARGET
    fi

    # Replace old module after pre-deploy and before post-deploy
    ln -fsn /ghost/$UUID $TARGET
    cd $TARGET

    if [ -e postdeploy ]; then
        echo "Executing postdeploy script..." >> /tmp/$LOGFILE
        chmod +x postdeploy
        GHOST_APP=$APP GHOST_ENV=$ENV GHOST_ROLE=$ROLE GHOST_MODULE_NAME=$MODULE_NAME GHOST_MODULE_PATH=$TARGET ./postdeploy 2>&1 | tee -a /tmp/$LOGFILE
    fi

    purge_oldest_succeed_deploy $MODULE_NAME $UUID
}

function find_module() {
    for line in $(cat /tmp/MANIFEST)
      do
        MODULE_NAME=$(echo $line | awk -F':' '{print $1}')
        MODULE_FILE=$(echo $line | awk -F':' '{print $2}')
        TARGET=$(echo $line | awk -F':' '{print $3}')
        if [ "$1" == "$MODULE_NAME" ]; then
            echo $MODULE_NAME $MODULE_FILE $TARGET
        fi
    done
}

function exit_deployment() {
    echo "Removing Manifest file" >> /tmp/$LOGFILE
    rm -f /tmp/MANIFEST
    echo "Unlocking $LOCK..."
    rmdir $LOCK
    echo "Unlocked $LOCK"
    exit $1
}

echo "Downloading Manifest" >> /tmp/$LOGFILE
/usr/local/bin/aws s3 cp s3://$S3_BUCKET/ghost/$APP/$ENV/$ROLE/MANIFEST /tmp/ --region "$EC2_REGION"

if [ $? -ne 0 ]; then
    echo "Manifest download error...Exiting" >> /tmp/$LOGFILE
    # init zabbix before quit
    exit_deployment 10
fi

if [ -n "$1" ]; then
    # Deploy only one module
    MODULE=$(find_module $1)
    deploy_module $MODULE
else
    # Deploying all modules
    for line in $(cat /tmp/MANIFEST) ; do
        MODULE_NAME=$(echo $line | awk -F':' '{print $1}')
        MODULE_FILE=$(echo $line | awk -F':' '{print $2}')
        TARGET=$(echo $line | awk -F':' '{print $3}')
        deploy_module $MODULE_NAME $MODULE_FILE $TARGET
    done
fi

exit_deployment 0
